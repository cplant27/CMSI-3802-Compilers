Toal {
  Program    = Statement*
  Statement  = (constantly)? make id "with" (CallExp|VarVal) ";"       -- vardec
             | change Var "to"  (CallExp|VarVal) ";"                   -- varass
             | ChngVar0                                                -- chngvar0
             | ChngVar1                                                -- chngvar1
             | print (CallExp|VarVal) ";"                              -- prnt
             | append Exp "to" Var ("at" index)? ";"                   -- append
             | remove "item" index "from" Var ";"                      -- remove
             | if (BoolExp|Var) Block (ElseStmt)?                      -- if
             | automate id "(" Params ")" Block                        -- autodec
             | output (VarVal) ";"                                     -- output
             | id ~space "(" Args ")" ";"                              -- callstmt
             | loop "while" BoolExp Block                              -- while
             | loop "over" id "in" (Var|List) Block                           -- for
             | break ";"                                               -- break

  Var        = id
  CallExp    = id ~space "(" Args ")"

  List       = "[" ListOf<VarVal, ","> "]"
  Block      = "{" Statement* "}"

  ElseStmt   = if "not" Block

  Params     = ListOf<id, ",">
  Args       = ListOf<(VarVal), ",">

  Term       = numeral | Var
  Word       = strlit
  Boolean    = true | false | BoolExp
  VarVal     = Exp | Boolean | Word | List
  Element    = Exp | Word | Boolean | List

  Exp0       = "(" Exp ")"                            -- parentheses

  Exp        = Exp operator Exp                       -- expression
             | Term
             | Exp0
             | CallExp
  operator   = "plus" | "minus" 
             | "times" | "divided by" 
             | "to the" | "mod"

  BoolExp    = Exp boolop Exp
  boolop     = "is greater than" | "is less than" 
             | "is" | "is not" 
             | "is greater than or equal to" 
             | "is less than or equal to"

  ChngVar0   = ChngOp0 Var ("by"|"to the") Exp ";"
  ChngOp0    = "multiply"
             | "divide"
             | "mod"
             | "raise"

  ChngVar1   = ChngOp1 Exp ("to"|"from") Var ";"
  ChngOp1    = "add"
             | "subtract"

  keyword    = make | change | constantly | print 
             | append | remove
             | if | true | false 
             | empty | automate | output 
             | loop| while | for| break 
             | add | subtract | multiply | divide | mod | raise

  make       = "make" ~idchar
  change     = "change" ~idchar
  constantly = "constantly" ~idchar
  print      = "print" ~idchar

  append     = "append" ~idchar
  remove     = "remove" ~idchar

  if         = "if" ~idchar
  true       = "true" ~idchar
  false      = "false" ~idchar

  empty      = "empty" ~idchar
  automate   = "automate" ~idchar
  output     = "output" ~idchar

  loop       = "loop" ~idchar
  while      = "while" ~idchar
  for        = "over" ~idchar
  break      = "break" ~idchar

  add        = "add" ~idchar
  subtract   = "subtract" ~idchar
  multiply   = "multiply" ~idchar
  divide     = "divide" ~idchar
  mod        = "mod" ~idchar
  raise      = "raise" ~idchar

  id         = ~keyword ~numeral idchar+
  idchar     = letter | digit | "_" 
  index      = digit+
  space     += "#" (~"\n" any)*                       -- comment
  numeral    = ("-")? digit+ ("." digit+)?
  strlit     = "\"" (~"\"" any)* "\""
}
Toal {
  Program    = Statement*
  Statement  = (constantly)? make id "with" (CallExp|VarVal) ";"       -- vardec
             | change Var "to"  (CallExp|VarVal) ";"                   -- varass
             | ChngVar                                                 -- chngvar
             | print (CallExp|VarVal) ";"                              -- prnt
             | append Exp "to" Var ("at" index)? ";"                   -- append
             | remove "item" index "from" Var ";"                      -- remove
             | if BoolExp Block (ElseStmt)?                            -- if
             | automate id "(" Params ")" Block                        -- autodec
             | output (VarVal) ";"                                     -- output
             | id "(" Args ")"                                         -- callstmt
             | loop "while" BoolExp Block                              -- while
             | loop "over" id "in" Var Block                           -- for
             | break ";"                                               -- break

  Var        = id
  CallExp    = id "(" Args ")"

  List       = "[" ListOf<Element, ","> "]"
  Block      = "{" Statement+ "}"

  ElseStmt   = if "not" Block

  Params     = ListOf<id, ",">
  Args       = ListOf<(VarVal), ",">

  Term       = numeral | Var
  Word       = strlit
  Boolean    = true | false
  VarVal     = Exp | BoolExp | Word | List
  Element    = Term | Word | Boolean | List

  Exp        = "(" Exp ")"                            -- parentheses
             | Exp "to the" Exp                       -- exponents
             | Exp "times" Exp                        -- multiplication
             | Exp "divided by" Exp                   -- division
             | Exp "mod" Exp                          -- modulo
             | Exp "plus" Exp                         -- addition
             | Exp "minus" Exp                        -- subtraction
             | Term
             | CallExp

  BoolExp    = Exp "is greater than" Exp              -- greater
             | Exp "is less than" Exp                 -- less
             | Exp "is" Exp                           -- equals
             | Exp "is not" Exp                       -- notEqual
             | Exp "is greater than or equal to" Exp  -- greaterEqual
             | Exp "is less than or equal to" Exp     -- lessEqual
             | Boolean
             | CallExp

  ChngVar    = add Exp "to" Var ";"                   -- addTo
             | subtract Exp "from" Var ";"            -- subFrom
             | multiply Var "by" Exp ";"              -- multBy
             | divide Var "by" Exp ";"                -- divBy
             | raise Var "to the" Exp ";"             -- raiseTo
             | mod Var "by" Exp ";"                   -- modBy

  keyword    = make | change | constantly | print 
             | append | remove
             | if | true | false 
             | empty | automate | output 
             | loop| while | for| break 
             | add | subtract | multiply | divide | mod | raise

  make       = "make" ~idchar
  change     = "change" ~idchar
  constantly = "constantly" ~idchar
  print      = "print" ~idchar

  append     = "append" ~idchar
  remove     = "remove" ~idchar

  if         = "if" ~idchar
  true       = "true" ~idchar
  false      = "false" ~idchar

  empty      = "empty" ~idchar
  automate   = "automate" ~idchar
  output     = "output" ~idchar

  loop       = "loop" ~idchar
  while      = "while" ~idchar
  for        = "over" ~idchar
  break      = "break" ~idchar

  add        = "add" ~idchar
  subtract   = "subtract" ~idchar
  multiply   = "multiply" ~idchar
  divide     = "divide" ~idchar
  mod        = "mod" ~idchar
  raise      = "raise" ~idchar

  id         = ~keyword ~numeral idchar+
  idchar     = letter | digit | "_" 
  index      = digit+
  space     += "#" (~"\n" any)*                       -- comment
  numeral    = ("-")? digit+ ("." digit+)?
  strlit     = "\"" (~"\"" any)* "\""
}